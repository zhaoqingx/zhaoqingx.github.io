---
layout:     post
title:      注解
subtitle:   注解入门
date:       2021-02-26
author:     zhaoqx
header-img: img/post-bg-kuaidi.jpg
catalog: true
tags:
    - 注解和反射
---



#### 注解入门

   Annotation：不是程序本身，可以对程序做出解释
   						可以被其他程序（比如编译器等）读取
   注解的格式: 注解是"@注释名"在代码中存在的，还可以添加一些参数值，例如：   	@SuppressWarnings（value=“unchecked”）
   在哪里使用：可以附加在package，class，method，field等上面，相当于给他们添加了额外的辅助信息，可以   通过反射机制变成实现对这些元数据的访问

<!--more-->

#### 内置注解：

​	@Override，定义在java.lang.Override中，此注释只是用于修辞方法，表示一个方法声明打算重写超类中的另一个方法声明；
​	@Deprecated  不推荐程序员使用，但可以使用，或者存在更好的方式；
​	@SuppressWarnings("all")需要参数，镇压警告
​	

#### 元注解

​	元注解的作用就是负责注解其他注解，java定义了4个标准的meta-annotation类型，他们被用来提供对其它annotation类型做说明。
​	这些类型和他们所支持的类在java.lang.annotaion包中可以找到。（@Target，@Retention，@Documented，@Inherited）
​		@Target：用于描述注解的适用范围（即：被描述的注解可以用在什么地方）
​		@Retention：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（source（源代码）<class<runtime（运行时））
​		@Document: 说明该注解被包含在javadoc中
​		@Inherited：说明子类可以继承父类中的该注解
​		

#### 自定义注解 

​	使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口；
​	分析:
​	1、@interface用来声明一个注解。格式：public @interface 注解名{定义内容}
​	2、其中的每一个方法实际上是声明了一个配置参数
​	3、方法的名称就是参数的名称
​	4、返回值类型就是参数的类型（返回值只能是基本类型Class，String，enum）
​	5、可以通过default来声明参数的默认值
​	6、如果只有一个参数成员，一版参数名未value
​	7、注解元素必须要有值，定义注解元素时，经常使用空字符串，0作为默认值

